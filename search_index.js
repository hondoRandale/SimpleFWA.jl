var documenterSearchIndex = {"docs":
[{"location":"#SimpleFWA.jl","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"","category":"section"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"(Image: TagBot)","category":"page"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"(Image: documentation)","category":"page"},{"location":"#Introduction","page":"SimpleFWA.jl","title":"Introduction","text":"","category":"section"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"This solver is loosely based on the coopFWA algorithm.","category":"page"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"___","category":"page"},{"location":"#calling-convention","page":"SimpleFWA.jl","title":"calling convention","text":"","category":"section"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"each Objective function passed to SimpleFWA has to comply with the following    simple parameter convention f( x; kwargs ) where f is the objective    function to be minimized. This convention ensures SimpleFWA can be used with    time-series-problems, classification-problems, regression-problems.    Univariate as well as multivariate target sets are admissible.","category":"page"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"___","category":"page"},{"location":"#example","page":"SimpleFWA.jl","title":"example","text":"","category":"section"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"   using SimpleFWA\n   using Test\n   Easom(x;kwargs) = -cos( x[1] ) * cos( x[2] ) *\n                     exp( -( (x[1]-π)^2 + (x[2]-π)^2 ) )\n   lower    = [ -10.0f0, -10.0f0 ];\n   upper    = [ 10.0f0, 10.0f0 ];\n   sFWA( objFunction ) = simpleFWA( 16, 16, ();\n                                    λ_0         = 7.95f0,\n                                    ϵ_A         = 0.5f-2,\n                                    C_a         = 1.2f0,\n                                    C_r         = 0.8f0,\n                                    lower       = lower,\n                                    upper       = upper,\n                                    objFunction = objFunction,\n                                    XPrimary    = XPrimary,\n                                    yPrimary    = yPrimary,\n                                    maxiter     = 40 )                             \n   solutionFWA = sFWA( Easom );\n   @test isapprox( solutionFWA.x_b[1], π; atol=0.01 )\n   @test isapprox( solutionFWA.x_b[2], π; atol=0.01 )                             ","category":"page"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"___","category":"page"},{"location":"#function-reference","page":"SimpleFWA.jl","title":"function reference","text":"","category":"section"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"SimpleFWA.simpleFWA","category":"page"},{"location":"#SimpleFWA.simpleFWA","page":"SimpleFWA.jl","title":"SimpleFWA.simpleFWA","text":"simpleFWA( nFireworks::Int,\n           nSparks::Int;\n           λ_0::Float32,\n           ϵ_A::Float32,\n           C_a::Float32,\n           C_r::Float32,\n           lower::Vector{Float32},\n           upper::Vector{Float32},\n           objFunction::Function,\n           XPrimary::Vector{ Matrix{Float32} },\n           yPrimary::Vector{ Matrix{Float32} },\n           maxiter::Int,\n           ϵ_conv::Float32=1f-6 )\nminimize objective function objFunction, the solution space is limited by lower and upper bound.\nThe optimization algorithm utilized is an simplified version of dynFireWorksAlgorithm. The nFireworks\nparameter governs the number of fireworks being evaluated in parallel in each iteration.  nSparks is\nthe number of sparks per firework, in remains constant foreach firework. ϵ_A is the smoothing parameter\ncontrolling the variance of amplitudes computed foreach fw. C_a ist the upscaling parameter for explosion\namplitudes. C_r is the downscaling parameter for explosion amplitudes. XPrimary is the feature set of the\nprimary algorithm to be tuned. yPrimary is the target set of the primary algorithm. maxiter is the maximum\nnumber iteraions.  ϵ_conv denotes the convergence parameter.\n\n\n\n\n\n","category":"function"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"FWA struct","category":"page"},{"location":"","page":"SimpleFWA.jl","title":"SimpleFWA.jl","text":"Parameter Description Type\nX each column is the origin of a fw Matrix{Float32}\nfitness_fireworks fitness of each fw Vector{Float32}\nS contains all sparks foreach fw Vector{ Matrix{Float32} }\nfitness_sparks fitness of each spark Vector{ Vector{Float32} }\nx_b best found solution Vector{Float32}\ny_min function value at best found solution Float32\niter number of iterations executed Int\nerr_conv convergence error after finish Float32","category":"page"}]
}
